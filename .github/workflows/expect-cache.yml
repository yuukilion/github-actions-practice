name: Expect Command Cache Example

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # 手動実行のためのトリガーを追加
  workflow_dispatch:

jobs:
  test-expect-cache:
    runs-on: ubuntu-latest
    steps:
      # ステップ1: リポジトリをチェックアウト
      - uses: actions/checkout@v4

      # ステップ2: APTキャッシュを設定
      - name: Cache APT Packages
        id: cache-apt
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.apt-cache
          key: ${{ runner.os }}-apt-expect

      # ステップ3: キャッシュの状態を表示
      - name: Check Cache Status
        run: |
          if [ "${{ steps.cache-apt.outputs.cache-hit }}" == "true" ]; then
            echo "✅ APTキャッシュがヒットしました。インストールが高速化されます。"
          else
            echo "❌ APTキャッシュミスです。通常速度でインストールします。"
          fi

      # ステップ4: expectコマンドをインストール（キャッシュの有無にかかわらず必要）
      - name: Install Expect
        run: |
          # キャッシュディレクトリを作成し、APT設定を追加
          mkdir -p ${{ github.workspace }}/.apt-cache/partial
          chmod -R 777 ${{ github.workspace }}/.apt-cache
          echo 'Dir::Cache::Archives "${{ github.workspace }}/.apt-cache";' | sudo tee /etc/apt/apt.conf.d/01custom
          
          # APTキャッシュがある場合、apt-get updateをスキップできる
          if [ "${{ steps.cache-apt.outputs.cache-hit }}" != "true" ]; then
            echo "APTパッケージリストを更新しています..."
            sudo apt-get update
          fi
          
          # インストール開始時間を記録
          start_time=$(date +%s)
          
          # expectのインストール
          sudo apt-get install -y expect
          
          # インストール完了時間と所要時間を計算
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "📦 expectをインストールしました (所要時間: ${duration}秒)"

      # ステップ5: expectコマンドの動作確認
      - name: Verify Expect Installation
        run: |
          which expect
          expect -version
          echo "🔍 expectコマンドが利用可能です。バージョン情報を表示しています。"

      # ステップ6: シンプルなexpectスクリプトを実行
      - name: Run Simple Expect Script
        run: |
          cat << 'EOF' > test.exp
          #!/usr/bin/expect -f
          spawn echo "Hello from expect!"
          expect "Hello"
          send_user "\nExpect script completed successfully!\n"
          exit 0
          EOF
          chmod +x test.exp
          ./test.exp
          
      # ステップ7: キャッシュディレクトリのクリーンアップ - キャッシュ保存前に権限を修正
      - name: Cleanup Cache Permissions
        if: always()  # 他のステップが失敗しても常に実行
        run: |
          echo "🧹 キャッシュディレクトリの権限を修正しています..."
          # lockファイルを削除
          rm -f ${{ github.workspace }}/.apt-cache/lock
          # partialディレクトリのパーミッションを修正
          chmod -R 755 ${{ github.workspace }}/.apt-cache
          # キャッシュディレクトリの所有者をランナーユーザーに変更
          sudo chown -R $(id -u):$(id -g) ${{ github.workspace }}/.apt-cache
          echo "✅ キャッシュディレクトリのクリーンアップが完了しました"